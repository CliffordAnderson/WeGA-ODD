<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2014-04-11T17:39:31.744+02:00 by 'extract-isosch.xsl'. -->

<!-- ********************* -->
<!-- namespaces, declared: -->
<!-- ********************* -->
<ns prefix="s" uri="http://www.ascc.net/xml/schematron"/>
   <ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>
   <ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>
   <ns prefix="teix" uri="http://www.tei-c.org/ns/Examples"/>

   <!-- ********************* -->
<!-- namespaces, implicit: -->
<!-- ********************* -->
<ns prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>
   <ns prefix="teix" uri="http://www.tei-c.org/ns/Examples"/>

   <!-- ************ -->
<!-- constraints: -->
<!-- ************ -->
<pattern id="wegaBiblio-att.datable-calendar-constraint-calendar">
          <rule context="tei:*[@calendar]">
            <assert test="string-length(.) gt 0">
@calendar indicates the system or calendar to which the date represented by the content of this element
belongs, but this <name/> element has no textual content.</assert>
          </rule>
        </pattern>
   <pattern id="wegaBiblio-att.typed-constraint-subtypeTyped">
      <rule context="*[@subtype]">
        <assert test="@type">The <name/> element should not be categorized in detail with @subtype
 unless also categorized in general with @type</assert>
      </rule>
    </pattern>
   <pattern id="wegaBiblio-att.pointing-targetLang-constraint-targetLang">
          <rule context="tei:*[not(self::tei:schemaSpec)][@targetLang]">
            <assert test="count(@target)">@targetLang can only be used if @target is specified.</assert>
          </rule>
        </pattern>
   <pattern id="wegaBiblio-rs-constraint-rs-typeNkey">
                    <rule context="tei:rs[@type][@key]">
                        <assert test="                                 (matches(@key, '^A00\d{4}$') and @type='person') or                                 (matches(@key, '^A02\d{4}$') and @type='work') or                                 (matches(@key, '^A03\d{4}$') and @type='writing') or                                 (matches(@key, '^A04\d{4}$') and @type='letter') or                                 (matches(@key, '^A06\d{4}$') and @type='diaryDay') or                                 (matches(@key, '^(A00\d{4}\s)*A00\d{4}$') and @type='persons') or                                 (matches(@key, '^(A02\d{4}\s)*A02\d{4}$') and @type='works') or                                 (matches(@key, '^(A03\d{4}\s)*A03\d{4}$') and @type='writings') or                                 (matches(@key, '^(A04\d{4}\s)*A04\d{4}$') and @type='letters') or                                 (matches(@key, '^(A05\d{4}\s)*A05\d{4}$') and @type='news') or                                 (matches(@key, '^(A06\d{4}\s)*A06\d{4}$') and @type='diaryDays') or                                 (matches(@key, '^(A11\d{4}\s)*A11\d{4}$') and @type='biblio')">Type mismatch: The value for @type must be in accordance with the given ID in @key</assert>
                    </rule>
                </pattern>
   <pattern id="wegaBiblio-date-constraint-dateHeuristics1">
      <rule context="tei:date">
                    <report test="(@notBefore gt @notAfter) and not(starts-with(@notBefore, '-'))">value of notBefore greater than notAfter</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-date-constraint-dateHeuristics2">
      <rule context="tei:date">
                    <report test="(@notBefore lt @notAfter) and starts-with(@notBefore, '-')">value of notBefore smaller than notAfter</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-date-constraint-dateHeuristics3">
      <rule context="tei:date">
                    <report test="(@from or @to) and (@when or @notAfter or @notBefore)">cooccurence of date and duration attributes</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-date-constraint-dateHeuristics4">
      <rule context="tei:date">
                    <report test="@when and (@notAfter or @notBefore)">cooccurence of exact and uncertain date attributes</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-date-constraint-dateHeuristics5">
      <rule context="tei:date">
                    <assert test="@when or @notBefore or @notAfter or @from or @to or @cert='unknown' or matches(., '0000|o\.J\.|unknown') or ancestor::tei:text">tei:date benötigt ein Attribut @when, @notBefore o.ä.</assert>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-ptr-constraint-ptrAtts">
      <rule context="tei:ptr">
         <report test="@target and @cRef">Only one of the
attributes @target and @cRef may be supplied on <name/>.</report>
      </rule>
   </pattern>
   <pattern id="wegaBiblio-ref-constraint-refAtts">
      <rule context="tei:ref">
         <report test="@target and @cRef">Only one of the
	attributes @target' and @cRef' may be supplied on <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="wegaBiblio-title-constraint-duplicate-title">
      <rule context="tei:title">
                    <report test="@level = following-sibling::tei:title[not(@type)]/@level">Following title without @type</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-imprint-constraint-duplicate-biblScope-type">
      <rule context="tei:imprint">
                    <report test="count(distinct-values(tei:biblScope/@type)) ne count(tei:biblScope/@type)">duplicate value for biblScope</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-seg-constraint-activeOrPassivePerformance">
      <rule context="tei:seg">
                    <report test="./@subtype = ('active', 'passive') and not(./@type = 'performance')">if @subtype contains 'active' or 'passive' @type has to be 'performance'</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-seg-constraint-AddresseeOrSenderCorrespondence">
      <rule context="tei:seg">
                    <report test="./@subtype = ('sender', 'addressee') and not(./@type = 'correspondence')">if @subtype contains 'sender' or 'addressee' @type has to be 'correspondence'</report>
                </rule>
   </pattern>
   <pattern id="wegaBiblio-att.identified-constraint-spec-in-module">
      <rule context="tei:elementSpec[@module]|tei:classSpec[@module]|tei:macroSpec[@module]">
        <assert test="         (not(ancestor::tei:schemaSpec | ancestor::tei:TEI | ancestor::tei:teiCorpus)) or         (not(@module) or          (not(//tei:moduleSpec) and not(//tei:moduleRef))  or         (//tei:moduleSpec[@ident = current()/@module]) or          (//tei:moduleRef[@key = current()/@module]))         ">
        Specification <value-of select="@ident"/>: the value of the module attribute ("<value-of select="@module"/>") 
should correspond to an existing module, via a moduleSpec or
      moduleRef</assert>
      </rule>
    </pattern>
   <pattern id="wegaBiblio-att.deprecated-validUntil-constraint-deprecated">
          <rule context="tei:*[@validUntil]">
            <assert test="@validUntil cast as xs:date ge          current-date()">
            <value-of select="if          (@ident) then concat('The ',@ident) else          concat('This ',local-name(.),' of          ',ancestor::tei:*[@ident][1]/@ident)"/>
	    construct is outdated (as of <value-of select="@validUntil"/>); ODD processors may ignore it, and its use is no longer supported</assert>
            <assert role="nonfatal"
                 test="@validUntil cast as xs:date ge          (current-date() + (60*xs:dayTimeDuration('P1D')))">
            <value-of select="if (@ident) then concat('The ',@ident) else concat('This ',local-name(.),' of ',ancestor::tei:*[@ident][1]/@ident)"/>  construct becomes outdated on <value-of select="@validUntil"/>
         </assert>
          </rule>
        </pattern>
   <pattern id="wegaBiblio-moduleRef-constraint-modref">
      <rule context="tei:moduleRef">
        <report test="* and @key">
Child elements of <name/> are only allowed when an external module is being loaded
        </report>
      </rule>
    </pattern>
   <pattern id="wegaBiblio-moduleRef-prefix-constraint-not-same-prefix">
          <rule context="tei:moduleRef">
            <report test="//*[ not( generate-id(.) eq generate-id(      current() ) ) ]/@prefix = @prefix">The prefix attribute
	    of <name/> should not match that of any other
	    element (it would defeat the purpose)</report>
          </rule>
        </pattern>
   <pattern id="wegaBiblio-constraintSpec-constraint-sch">
      <rule context="tei:constraintSpec">
      
         <report test="tei:constraint/s:* and    not(@scheme='schematron')">
	Rules in the Schematron 1.* language must be inside
	a constraintSpec with a value of 'schematron' on the scheme attribute
      </report>
      </rule>
   </pattern>
   <pattern id="wegaBiblio-constraintSpec-constraint-isosch">
      <rule context="tei:constraintSpec">
      
         <report test="tei:constraint/sch:* and    not(@scheme='isoschematron')">
	Rules in the ISO Schematron language must be inside
	a constraintSpec with a value of 'isoschematron' on the scheme attribute
      </report>
      </rule>
   </pattern>
   <pattern id="wegaBiblio-constraintSpec-constraint-needrules">
      
      <rule context="tei:macroSpec/tei:constraintSpec[@scheme='isoschematron']/tei:constraint">
	        <report test="sch:assert|sch:report">An ISO Schematron constraint specification for a macro should not have an 'assert' or 'report' element without a parent 'rule' element</report>
      </rule>
    </pattern>
   <pattern id="wegaBiblio-attDef-constraint-attDefContents">
      <rule context="tei:attDef">
      
         <assert test="ancestor::teix:egXML[@valid='feasible'] or @mode eq 'change' or @mode eq 'delete' or tei:datatype or tei:valList[@type='closed']">Attribute: the definition of the @<value-of select="@ident"/> attribute in the <value-of select="ancestor::*[@ident][1]/@ident"/>
            <value-of select="' '"/>
            <value-of select="local-name(ancestor::*[@ident][1])"/> should have a closed valList or a datatype</assert>
      </rule>
   </pattern>
   <pattern id="wegaBiblio-constraint-whitespaceOnlyContent">
                <rule context="tei:surname | tei:forename | tei:persName | tei:author[not(@sameAs)] | tei:occupation | tei:settlement | tei:country | tei:rs | tei:workName | tei:characterName | tei:hi | tei:head | tei:note[not(@type='part')] | tei:placeName">
                    <report test="normalize-space(.) = ''">
            <name/> has whitespace only content</report>
                </rule>
            </pattern>
   <pattern id="wegaBiblio-constraint-elementStartsWithWhitespace">
                <rule context="tei:surname | tei:forename | tei:persName[not(@type)] | tei:author | tei:occupation | tei:settlement | tei:country | tei:rs | tei:workName | tei:characterName | tei:hi | tei:placeName[not(parent::tei:address or parent::tei:birth or parent::tei:death)]">
                    <report test="matches(.,'^\s')">whitespace at the beginning of element <name/>
         </report>
                </rule>
            </pattern>

   <!-- *********** -->
<!-- deprecated: -->
<!-- *********** -->
<pattern>
      <rule context="tei:moduleSpec|tei:schemaSpec|tei:elementSpec|tei:classSpec|tei:macroSpec|tei:constraintSpec|tei:attDef">
         <report test="@status" role="nonfatal">WARNING: use of deprecated attribute — @status of the <name/> element will be removed from the TEI on 2015-06-19.
                </report>
      </rule>
   </pattern>
</schema>
